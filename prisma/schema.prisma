// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model blog {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String     @default("")
  description  String     @default("")
  slug         String     @unique()
  focusKeyword String[]   @default([])
  heroImage    heroImage?
  author       String     @default("")
  body         String
  relatedBlogs String[]   @default([])
  published    Boolean    @default(false)
  tags         String[]   @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type heroImage {
  url String
  alt String
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  contact       String?
  state         String?
  country       String?
  courseId      String[]  @default([])
  bundleId      String[]  @default([])
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Payments  Payments[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Payments {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  paymentId      String         @unique
  email          String
  user           User           @relation(fields: [email], references: [email])
  amount         Int
  state          String
  contact        String
  country        String
  currency       Currency       @default(INR)
  paymentGateway PaymentGateway
  paymentMethod  String?
  paymentStatus  PaymentStatus  @default(created)
  purchaseType   PurchaseType

  stripePaymentId   String?
  razorpayPaymentId String?
  razorpayOrderId   String?

  courseId String?
  bundleId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
}

enum Currency {
  INR
  USD
}

enum PaymentGateway {
  stripe
  razorpay
}

enum PaymentStatus {
  created
  completed
  failed
  refunded
  init_refund
  failed_refund
}

enum PurchaseType {
  course
  bundle
}
