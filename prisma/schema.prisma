// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model job {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  company    String   @default("")
  jobId      String   @unique()
  title      String   @default("")
  location   String   @default("")
  link       String   @default("")
  imageUrl   String   @default("")
  postedDate String   @default("")
  category   String   @default("")
  tags       String[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// model category {
//   id           String     @id @default(auto()) @map("_id") @db.ObjectId
//   title        String     @default("")
//   description  String     @default("")
//   slug         String     @unique
//   focusKeyword String[]   @default([])
//   heroImage    heroImage?
//   blogs        blog[]
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
// }

model blog {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String     @default("")
  description  String     @default("")
  slug         String     @unique()
  focusKeyword String[]   @default([])
  heroImage    heroImage?
  author       String     @default("")
  body         String
  relatedBlogs String[]   @default([])
  published    Boolean    @default(false)
  tags         String[]   @default([])
  // category     category?  @relation(fields: [categoryId], references: [id])
  // categoryId   String?    @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

type heroImage {
  url String
  alt String
}

model user {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String
  phone         String
  year          Int
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model clerkUser {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @unique
  name              String
  email             String    @unique
  contact           String?
  profileImageUrl   String?
  isMember          Boolean   @default(false)
  memberType        String?   @default("basic")
  purchasedCourseId String[]
  membershipExpiry  DateTime?
  completedLessons  String[]

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  payments  new_payments[]
}

model deletedUser {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  name              String
  email             String
  phone             String?
  image             String?
  isMember          Boolean   @default(false)
  memberType        String?   @default("basic")
  purchasedCourseId String[]
  membershipExpiry  DateTime?
  completedLessons  String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model new_payments {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  user              clerkUser     @relation(fields: [userId], references: [userId])
  userId            String
  email             String
  paymentId         String?
  amount            Int
  currency          String        @default("INR")
  paymentGateway    payment       @default(razorpay)
  paymentMethod     String?
  paymentStatus     paymentStatus @default(created)
  stripePaymentId   String?
  razorpayPaymentId String?
  razorpayOrderId   String?
  purchaseType      purchaseType
  courseId          String?
  bundleId          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum payment {
  stripe
  razorpay
}

enum paymentStatus {
  created
  completed
  failed
  refunded
  init_refund
  failed_refund
}

enum purchaseType {
  course
  bundle
}
